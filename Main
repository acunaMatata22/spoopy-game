from tkinter import *


class Arrow(object):
    def __init__(self, tipX, tipY, angle):
        self.X, self.Y = tipX, tipY
        self.angle = angle
        self.power = 0 # 0-100
    def changePower(sign):
        if sign >= 0 and self.power + sign <= 100:
            self.power += sign
        elif sign < 0 and self.power + sign >= 0:
            self.power -= sign
    def changeAngle(sign):
        if sign >= 0 and self.angle + sign <= 90:
            self.angle += sign
        elif sign < 0 and self.angle + sign >= 0:
            self.angle -= sign
    def shoot(self):
        #TODO need to implement
        pass
    def drawArrow(canvas, pointX, pointY, angle):
        radians = -angle * math.pi / 180
        pointOfReference1X = pointX + 23 * math.cos(radians + math.pi)
        pointOfReference1Y = pointY + 23 * math.sin(radians + math.pi)
        pointOfReference2X = pointOfReference1X + 200 * \
            math.cos(round(radians + math.pi - .0125, 3))
        pointOfReference2Y = pointOfReference1Y + 200 * \
            math.sin(round(radians + math.pi - .0125, 3))
        pointOfReference3X = pointX
        pointOfReference3Y = pointY
        #arrow body
        rectangleFirstPointX = pointOfReference1X + 200 * \
            math.cos(round(radians + math.pi + .0125, 3))
        rectangleFirstPointY = pointOfReference1Y + 200 * \
            math.sin(round(radians + math.pi + .0125, 3))
        rectangleSecondPointX = pointOfReference1X + 2.5 * \
            math.cos(radians + 3 * math.pi / 2)
        rectangleSecondPointY = pointOfReference1Y + 2.5 * \
            math.sin(radians + 3 * math.pi / 2)
        rectangleThirdPointX = pointOfReference1X + 2.5 * \
            math.cos(radians + math.pi / 2)
        rectangleThirdPointY = pointOfReference1Y + 2.5 * \
            math.sin(radians + math.pi / 2)
        rectangleFourthPointX = pointOfReference1X + 200 * \
            math.cos(round(radians + math.pi - .0125, 3))
        rectangleFourthPointY = pointOfReference1Y + 200 * \
            math.sin(round(radians + math.pi - .0125, 3))
        canvas.create_polygon(rectangleFirstPointX, rectangleFirstPointY, 
            rectangleSecondPointX, rectangleSecondPointY, rectangleThirdPointX, 
            rectangleThirdPointY, rectangleFourthPointX, rectangleFourthPointY, 
            fill="brown")
        #arrow tail
        firstPointX = pointOfReference2X
        firstPointY = pointOfReference2Y
        secondPointX = firstPointX + 8.49 * math.cos(radians + 3 * math.pi / 4)
        secondPointY = firstPointY + 8.49 * math.sin(radians + 3 * math.pi / 4)
        thirdPointX = secondPointX + 40 * math.cos(radians + math.pi)
        thirdPointY = secondPointY + 40 * math.sin(radians + math.pi)
        fourthPointX = thirdPointX + 12 * math.cos(radians + 7 * math.pi / 4)
        fourthPointY = thirdPointY + 12 * math.sin(radians + 7 * math.pi / 4)
        fifthPointX = fourthPointX + 12 * math.cos(radians + 5 * math.pi / 4)
        fifthPointY = fourthPointY + 12 * math.sin(radians + 5 * math.pi / 4)
        sixthPointX = fifthPointX + 40 * math.cos(radians)
        sixthPointY = fifthPointY + 40 * math.sin(radians)
        seventhPointX = sixthPointX + 8.49 * math.cos(radians + math.pi / 4)
        seventhPointY = sixthPointY + 8.49 * math.sin(radians + math.pi / 4)
        canvas.create_polygon(firstPointX, firstPointY, secondPointX, secondPointY, 
            thirdPointX, thirdPointY, fourthPointX, fourthPointY, fifthPointX, 
            fifthPointY, sixthPointX, sixthPointY, seventhPointX, seventhPointY, 
            fill="gray")
        #rectangle in tail
        topRightX = firstPointX
        topRightY = firstPointY
        topLeftX = topRightX + 45 * math.cos(radians + math.pi)
        topLeftY = topRightY + 45 * math.sin(radians + math.pi)
        bottomLeftX = topLeftX + 5 * math.cos(radians + 3 * math.pi / 2)
        bottomLeftY = topLeftY + 5 * math.sin(radians + 3 * math.pi / 2)
        bottomRightX = bottomLeftX + 45 * math.cos(radians)
        bottomRightY = bottomLeftY + 45 * math.sin(radians)
        canvas.create_polygon(topRightX, topRightY, topLeftX, topLeftY, 
            bottomLeftX, bottomLeftY, bottomRightX, bottomRightY, fill="brown")
        #arrow head
        firstKitePointX = pointOfReference3X
        firstKitePointY = pointOfReference3Y
        secondKitePointX = pointOfReference3X + 42.7 * \
            math.cos(radians + 10 * math.pi / 9)
        secondKitePointY = pointOfReference3Y + 42.7 * \
            math.sin(radians + 10 * math.pi / 9)
        thirdKitePointX = pointOfReference3X + 25 * math.cos(radians + math.pi)
        thirdKitePointY = pointOfReference3Y + 25 * math.sin(radians + math.pi)
        fourthKitePointX = pointOfReference3X + 42.7 * \
            math.cos(radians + 8 * math.pi / 9)
        fourthKitePointY = pointOfReference3Y + 42.7 * \
            math.sin(radians + 8 * math.pi / 9)
        canvas.create_polygon(firstKitePointX, firstKitePointY, secondKitePointX, 
            secondKitePointY, thirdKitePointX, thirdKitePointY, fourthKitePointX, 
            fourthKitePointY, fill="gray")


####################################
# mainframe functions
####################################

def init(data):
    # load data.xyz as appropriate
    data.screens = ["start", "instructions", "game", "end"]
    data.gameMode = data.screens[0]
    data.txtMargin = 10
    loadImages(data)
    
def loadImages(data):
    data.strtImg = PhotoImage(file="Images/natureBack.gif")
    
def mousePressed(event, data):
    # use event.x and event.y
    pass

def keyPressed(event, data):
    # use event.char and event.keysym
    if data.gameMode == data.screens[0] and event.keysym == "space":
        data.gameMode = data.screens[1]
    elif data.gameMode == data.screens[1] and event.keysym == "space":
        data.gameMode = data.screens[2]
    elif data.gameMode == data.screens[2]:
        if event.keysym == "Up":
            data.arrow.changePower(2)
        elif event.keysym == "Down":
            data.arrow.changePower(-2)
        elif event.keysym == "Right":
            data.arrow.changeAngle(-2)
        elif event.keysym == "Left":
            data.arrow.changeAngle(2)
        elif event.keysym == "space":
            data.arrow.shoot()
        elif event.char == 'h':
            data.gameMode = data.screens[1]
            
def timerFired(data):
    pass
def rgbString(red, green, blue):
    return "#%02x%02x%02x" % (red, green, blue)

def drawBush(canvas, x, y):
    color = rgbString(0, 102, 0)
    c1x, c1y = x - 50, y - 15
    c2x, c2y = x - 50, y - 45
    c3x, c3y = x - 43, y - 74
    c4x, c4y = x - 13, y - 74
    c5x, c5y = x + 17, y - 74
    c6x, c6y = x + 24, y - 45
    c7x, c7y = x + 24, y - 15
    canvas.create_oval(c1x - 15, c1y - 15, c1x + 15, c1y + 15, fill=color, width=0)
    canvas.create_oval(c2x - 15, c2y - 15, c2x + 15, c2y + 15, fill=color, width=0) 
    canvas.create_oval(c3x - 15, c3y - 15, c3x + 15, c3y + 15, fill=color, width=0) 
    canvas.create_oval(c4x - 15, c4y - 15, c4x + 15, c4y + 15, fill=color, width=0) 
    canvas.create_oval(c5x - 15, c5y - 15, c5x + 15, c5y + 15, fill=color, width=0) 
    canvas.create_oval(c6x - 15, c6y - 15, c6x + 15, c6y + 15, fill=color, width=0) 
    canvas.create_oval(c7x - 15, c7y - 15, c7x + 15, c7y + 15, fill=color, width=0)  
    canvas.create_rectangle(x - 50, y, x + 25, y - 75, fill=color, width=0)

def drawLandscape(canvas):
    #grass
    canvas.create_rectangle(-10, -10, 1000, 1000, fill=rgbString(76, 153, 0))
    #bushes
    drawBush(canvas, 75, 100)
    drawBush(canvas, 175, 150)
    drawBush(canvas, 275, 100)
    drawBush(canvas, 375, 150)
    drawBush(canvas, 475, 100)
    drawBush(canvas, 575, 150)
    drawBush(canvas, 675, 100)
    drawBush(canvas, 775, 150)
    drawBush(canvas, 875, 100)
    drawBush(canvas, 975, 150)
    #river
    canvas.create_rectangle(0, 200, 1000, 300, fill="blue", width=0)

def redrawAll(canvas, data):
    # draw in canvas
    if data.gameMode == "start":
        canvas.create_image(data.width / 2, data.height / 2,
                                            image=data.strtImg)
        canvas.create_text(2*data.width // 5 - 10, data.height // 3, text="The",
                                    font="Arial " + str(data.height // 10 - 3),
                                    fill="white")
        canvas.create_text(3*data.width // 5, 2*data.height // 3,
                    text="Game", font="Arial " + str(data.height // 10 - 3),
                                    fill="white")
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \"space\" to start...",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)
        #draw CLICKER last to stand out better
        canvas.create_text(data.width // 2, data.height // 2, text="ARROW",
                                font="Arial " + str(data.height // 5) + " bold",
                                fill="red")
    elif data.gameMode == "instructions":
        canvas.create_text(data.width / 2, data.height / 4,
                        text="Aim using the Left and Right arrow keys",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width / 2, 3*data.height / 5,
                        text="Change the power of the shot using",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width / 2 + 5,
                        3*data.height / 5 + data.height // 18 + data.txtMargin,
                        text="the Up and Down arrow keys",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \"space\" to continue...",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)
    elif data.gameMode == "game":
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \'h\' for help",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)

####################################
# mainframe loop
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(800, 400)
