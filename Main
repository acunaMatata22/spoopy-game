from tkinter import *

####################################
# customize these functions
####################################

def init(data):
    # load data.xyz as appropriate
    data.screens = ["start", "game", "end"]
    data.gameMode = data.screens[0]
    data.txtmargin = 10

def mousePressed(event, data):
    # use event.x and event.y
    pass

def keyPressed(event, data):
    # use event.char and event.keysym
    pass

def timerFired(data):
    pass#

def redrawAll(canvas, data):
    # draw in canvas
    if data.gameMode == "start":
    canvas.create_text(2*data.width // 5 - 5, data.height // 3, text="The",
                                font="Arial " + str(data.height // 10 - 3))
    canvas.create_text(3*data.width // 5 - 5, 2*data.height // 3,
                text="Game", font="Arial " + str(data.height // 10 - 3))
    canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                text="Press \"p\" to play...",
                                font="Arial " + str(data.height // 22),
                                fill="grey40", anchor=S)
    #draw CLICKER last to stand out better
    canvas.create_text(data.width // 2, data.height // 2, text="CLICKER",
                            font="Arial " + str(data.height // 6) + " bold",
                            fill="gold")

####################################
# use the run function as-is
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(400, 200)
