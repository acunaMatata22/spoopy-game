from tkinter import *


class Arrow(object):
    def __init__(self, tipX, tipY, angle):
        self.X, self.Y = tipX, tipY
        self.angle = angle
        self.power = 0 # 0-100
    def changePower(sign):
        if sign >= 0 and self.power + sign <= 100:
            self.power += sign
        elif sign < 0 and self.power + sign >= 0:
            self.power -= sign
    def changeAngle(sign):
        if sign >= 0 and self.angle + sign <= 90:
            self.angle += sign
        elif sign < 0 and self.angle + sign >= 0:
            self.angle -= sign
    def shoot(self):
        #TODO need to implement
        pass

####################################
# mainframe functions
####################################

def init(data):
    # load data.xyz as appropriate
    data.screens = ["start", "instructions", "game", "end"]
    data.gameMode = data.screens[0]
    data.txtMargin = 10
    loadImages(data)
    
def loadImages(data):
    data.strtImg = PhotoImage(file="Images/natureBack.gif")
    
def mousePressed(event, data):
    # use event.x and event.y
    pass

def keyPressed(event, data):
    # use event.char and event.keysym
    if data.gameMode == data.screens[0] and event.keysym == "space":
        data.gameMode = data.screens[1]
    elif data.gameMode == data.screens[1] and event.keysym == "space":
        data.gameMode = data.screens[2]
    elif data.gameMode == data.screens[2]:
        if event.keysym == "Up":
            data.arrow.changePower(2)
        elif event.keysym == "Down":
            data.arrow.changePower(-2)
        elif event.keysym == "Right":
            data.arrow.changeAngle(-2)
        elif event.keysym == "Left":
            data.arrow.changeAngle(2)
        elif event.keysym == "space":
            data.arrow.shoot()
        elif event.char == 'h':
            data.gameMode = data.screens[1]
            
def timerFired(data):
    pass

def redrawAll(canvas, data):
    # draw in canvas
    if data.gameMode == "start":
        canvas.create_image(data.width / 2, data.height / 2,
                                            image=data.strtImg)
        canvas.create_text(2*data.width // 5 - 10, data.height // 3, text="The",
                                    font="Arial " + str(data.height // 10 - 3),
                                    fill="white")
        canvas.create_text(3*data.width // 5, 2*data.height // 3,
                    text="Game", font="Arial " + str(data.height // 10 - 3),
                                    fill="white")
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \"space\" to start...",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)
        #draw CLICKER last to stand out better
        canvas.create_text(data.width // 2, data.height // 2, text="ARROW",
                                font="Arial " + str(data.height // 5) + " bold",
                                fill="red")
    elif data.gameMode == "instructions":
        canvas.create_text(data.width / 2, data.height / 4,
                        text="Aim using the Left and Right arrow keys",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width / 2, 3*data.height / 5,
                        text="Change the power of the shot using",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width / 2 + 5,
                        3*data.height / 5 + data.height // 18 + data.txtMargin,
                        text="the Up and Down arrow keys",
                        font="Arial " + str(data.height // 18))
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \"space\" to continue...",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)
    elif data.gameMode == "game":
        canvas.create_text(data.width // 2 + 3, data.height - data.txtMargin,
                                    text="Press \'h\' for help",
                                    font="Arial " + str(data.height // 22),
                                    fill="grey80", anchor=S)

####################################
# mainframe loop
####################################

def run(width=300, height=300):
    def redrawAllWrapper(canvas, data):
        canvas.delete(ALL)
        canvas.create_rectangle(0, 0, data.width, data.height,
                                fill='white', width=0)
        redrawAll(canvas, data)
        canvas.update()    

    def mousePressedWrapper(event, canvas, data):
        mousePressed(event, data)
        redrawAllWrapper(canvas, data)

    def keyPressedWrapper(event, canvas, data):
        keyPressed(event, data)
        redrawAllWrapper(canvas, data)

    def timerFiredWrapper(canvas, data):
        timerFired(data)
        redrawAllWrapper(canvas, data)
        # pause, then call timerFired again
        canvas.after(data.timerDelay, timerFiredWrapper, canvas, data)
    # Set up data and call init
    class Struct(object): pass
    data = Struct()
    data.width = width
    data.height = height
    data.timerDelay = 100 # milliseconds
    root = Tk()
    root.resizable(width=False, height=False) # prevents resizing window
    init(data)
    # create the root and the canvas
    canvas = Canvas(root, width=data.width, height=data.height)
    canvas.configure(bd=0, highlightthickness=0)
    canvas.pack()
    # set up events
    root.bind("<Button-1>", lambda event:
                            mousePressedWrapper(event, canvas, data))
    root.bind("<Key>", lambda event:
                            keyPressedWrapper(event, canvas, data))
    timerFiredWrapper(canvas, data)
    # and launch the app
    root.mainloop()  # blocks until window is closed
    print("bye!")

run(800, 400)
